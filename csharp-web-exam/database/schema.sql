-- SQL schema for exam database
-- SQLite Database Schema
-- Updated: 2025-10-14 - Added Users table for JWT Authentication

-- Users table for authentication
CREATE TABLE IF NOT EXISTS Users (
    Id INTEGER PRIMARY KEY AUTOINCREMENT,
    Username TEXT NOT NULL UNIQUE,
    PasswordHash TEXT NOT NULL,
    Email TEXT NOT NULL,
    Role TEXT NOT NULL DEFAULT 'User',
    CreatedAt TEXT NOT NULL,
    UpdatedAt TEXT
);

-- Categories table
CREATE TABLE IF NOT EXISTS Categories (
    Id INTEGER PRIMARY KEY AUTOINCREMENT,
    Name TEXT NOT NULL,
    CreatedAt TEXT NOT NULL,
    UpdatedAt TEXT
);

-- Products table with foreign key to Categories
CREATE TABLE IF NOT EXISTS Products (
    Id INTEGER PRIMARY KEY AUTOINCREMENT,
    Name TEXT NOT NULL,
    Price REAL NOT NULL,
    CategoryId INTEGER NOT NULL,
    CreatedAt TEXT NOT NULL,
    UpdatedAt TEXT,
    FOREIGN KEY (CategoryId) REFERENCES Categories(Id) ON DELETE CASCADE
);

-- Indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_users_username ON Users(Username);
CREATE INDEX IF NOT EXISTS idx_users_email ON Users(Email);
CREATE INDEX IF NOT EXISTS idx_products_categoryid ON Products(CategoryId);
CREATE INDEX IF NOT EXISTS idx_products_name ON Products(Name);
CREATE INDEX IF NOT EXISTS idx_categories_name ON Categories(Name);

-- Sample seed data

-- Users (Password for all users: "SampleEx4mF0rT3st!ñ" - SHA256 hashed)
-- Hash: xURlGlZiWBqnBLXbF3PiGyM7lHRj3UEACbgD+2HLREc= (example - actual hash generated at runtime)
INSERT INTO Users (Username, PasswordHash, Email, Role, CreatedAt) VALUES 
('admin', 'xURlGlZiWBqnBLXbF3PiGyM7lHRj3UEACbgD+2HLREc=', 'admin@example.com', 'Admin', datetime('now')),
('user1', 'xURlGlZiWBqnBLXbF3PiGyM7lHRj3UEACbgD+2HLREc=', 'user1@example.com', 'User', datetime('now')),
('user2', 'xURlGlZiWBqnBLXbF3PiGyM7lHRj3UEACbgD+2HLREc=', 'user2@example.com', 'User', datetime('now'));

-- NOTE: The actual password hash is generated by DbInitializer.cs at runtime
-- Password: SampleEx4mF0rT3st!ñ

-- Categories
INSERT INTO Categories (Name, CreatedAt) VALUES 
('Electronics', datetime('now')),
('Books', datetime('now')),
('Clothing', datetime('now')),
('Home & Garden', datetime('now')),
('Sports', datetime('now'));

-- Products
INSERT INTO Products (Name, Price, CategoryId, CreatedAt) VALUES 
('Laptop', 999.99, 1, datetime('now')),
('Smartphone', 699.99, 1, datetime('now')),
('Wireless Mouse', 29.99, 1, datetime('now')),
('USB-C Cable', 12.99, 1, datetime('now')),
('The Great Gatsby', 14.99, 2, datetime('now')),
('1984', 13.99, 2, datetime('now')),
('To Kill a Mockingbird', 15.99, 2, datetime('now')),
('T-Shirt', 19.99, 3, datetime('now')),
('Jeans', 49.99, 3, datetime('now')),
('Sneakers', 79.99, 3, datetime('now')),
('Garden Hose', 24.99, 4, datetime('now')),
('Plant Pot', 9.99, 4, datetime('now')),
('Basketball', 29.99, 5, datetime('now')),
('Tennis Racket', 89.99, 5, datetime('now')),
('Yoga Mat', 34.99, 5, datetime('now'));

-- ============================================================================
-- NOTES:
-- ============================================================================
-- 1. This schema is for reference only. The actual database is created and 
--    seeded automatically by DbInitializer.cs when the API starts.
--
-- 2. User passwords are hashed using SHA256 in the application.
--    Test password: SampleEx4mF0rT3st!ñ
--
-- 3. All timestamps use ISO 8601 format (UTC).
--
-- 4. Foreign key constraints are enabled in SQLite connection.
--
-- 5. The database file is created at: api/app_data/app.db (or app_dev.db)
--
-- 6. To reset the database, delete the .db file and restart the API.
--
-- ============================================================================
-- AUTHENTICATION:
-- ============================================================================
-- The API uses JWT Bearer authentication. All endpoints except /api/auth/*
-- require a valid JWT token in the Authorization header.
--
-- To get a token:
--   POST /api/auth/login
--   Body: { "username": "admin", "password": "SampleEx4mF0rT3st!ñ" }
--
-- Use the token:
--   Authorization: Bearer {token}
--
-- ============================================================================
-- DATABASE STRUCTURE:
-- ============================================================================
-- Users (3 tables total)
--   ├── Users          - Authentication (admin, user1, user2)
--   ├── Categories     - Product categories (5 categories)
--   └── Products       - Products (15 products, 3 per category)
--
-- Relationships:
--   Products.CategoryId → Categories.Id (CASCADE DELETE)
--
-- ============================================================================
